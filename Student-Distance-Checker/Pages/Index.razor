@page "/"
@using DistanceChecker;
@using Newtonsoft.Json;

<style>
    #map, #sortMap {
        height: 180px;
    }
</style>

<div id="map"></div>

<div class="mt-5">
    <div id="sortMap"></div>
</div>


<div class="container mt-5">
    <div class="form-group mb-4">
        <label>Stuent1 Lat</label>
        <input class="form-control mb-2" type="number" @bind="latUser1" placeholder="lat user 1" />

        <label>Stuent1 Lng</label>
        <input class="form-control mb-2" type="number" @bind="lngUser1" placeholder="lng user 1" />
    </div>

    <div class="form-group">
        <label>Stuent2 Lat</label>
        <input class="form-control mb-2" type="number" @bind="latUser2" placeholder="lat user 2" />

        <label>Stuent2 Lng</label>
        <input class="form-control" type="number" @bind="lngUser2" placeholder="lng user 2" />
    </div>

    <div class="form-group mt-5">
        <button class="btn btn-success" @onclick="Check">Check</button>
    </div>

    <div class="alert mt-5 @MsgClass" role="alert">
        @Msg
    </div>

</div>

 

 

<hr />


<div class="form-group mt-5">
    <button class="btn btn-success" @onclick="GetData">Data</button>
</div>

<ul>

    @foreach (var item in ListData)
    {
        <li>
            @item.lat , @item.lng , @item.order , @item.distance
        </li>
    }

</ul>


@code {

    public double? latUser1 { get; set; }

    public double? lngUser1 { get; set; }



    public double? latUser2 { get; set; }

    public double? lngUser2 { get; set; }


    public string Msg { get; set; }

    public string MsgClass { get; set; }

    public List<LatLng>? ListData { get; set; } = new List<LatLng>();

    [Inject] IJSRuntime JSRuntime { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("MapGenerator.Generate");
        }

    }

    public void Check()
    {


        if (latUser1 != null && lngUser1 != null && latUser2 != null && lngUser2 != null)
        {
            double distanceInKm = DistanceCalculator.Calculate(latUser1.Value, lngUser1.Value, latUser2.Value, lngUser2.Value);
            if (distanceInKm <= 5)
            {
                Msg = @$"Live in 5 Km Radius. Distacnce : {distanceInKm} km";
                MsgClass = "alert-success";
            }
            else
            {
                Msg = @$"they are far from each other. Distacnce : {distanceInKm} km";
                MsgClass = "alert-danger";
            }
        }
        else
        {

            Msg = @$"please check inputs";
            MsgClass = "alert-danger";
        }
    }

    public async void GetData()
    {
        var data = await JSRuntime.InvokeAsync<string>("GetList", null);

        List<LatLng> list = JsonConvert.DeserializeObject<List<LatLng>>(data);

        List<LatLng> sortlist = DistanceCalculator.Grouping(list);

        ListData = sortlist;

        string json = JsonConvert.SerializeObject(sortlist);
        await JSRuntime.InvokeVoidAsync("addMarkers", json);

    }

  

}